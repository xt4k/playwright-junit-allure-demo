plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'playwright.demo.taf.ui'
version = '1.0-SNAPSHOT'
compileJava.options.encoding = 'UTF-8'

repositories {
    gradlePluginPortal()
    mavenCentral()
}

ext {
    apacheCommonVer = "2.16.1"
    allureVersion = "2.27.0"
    aspectjVersion = "1.9.22.1"
    assertjVersion = "3.26.0"

    fakerVersion = "1.0.2"

    lombokVersion = "1.18.34"
    logbackVersion = "1.5.6"
    ownerVersion = "1.0.12"

    slf4jVersion = "2.0.13"

    junitVersion = "5.11.0-M2"

    playwrightVer = "1.45.0"
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


dependencies {
    implementation(
            "commons-io:commons-io:${apacheCommonVer}",
            "com.microsoft.playwright:playwright:${playwrightVer}",

            'com.github.automatedowl:allure-environment-writer:1.0.0',
            "io.qameta.allure.gradle.allure:allure-plugin:2.11.2",
            "io.qameta.allure:allure-junit-platform:${allureVersion}",

    )

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"

    testImplementation(

            platform("io.qameta.allure:allure-bom:${allureVersion}"),
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.qameta.allure:allure-junit-platform",
            "io.qameta.allure:allure-junit5:${allureVersion}",

            platform("org.junit:junit-bom:${junitVersion}"),
            "org.junit.jupiter:junit-jupiter:${junitVersion}",
            "org.junit.platform:junit-platform-suite",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",

            "org.aspectj:aspectjweaver:${aspectjVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "ch.qos.logback:logback-classic:${logbackVersion}",
            "ch.qos.logback:logback-core:${logbackVersion}",

            "org.assertj:assertj-core:${assertjVersion}",
            "org.aeonbits.owner:owner:${ownerVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "com.github.javafaker:javafaker:${fakerVersion}"
    )
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

tasks.register('playwright', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.microsoft.playwright.CLI'
}


task copyAllureConfigFiles(type: Copy) {
    description 'Adding Environment, Categories, and Allure Properties files'

    String allureProperties = "${projectDir}/src/main/resources/allure.properties"
    String allureCategories = "${projectDir}/src/main/resources/categories.json"
    String allureResults = "${project.buildDir}/allure-results/"

    from allureProperties, allureCategories
    into allureResults
}

task addAllureEnvironment {
    doLast {
        String environment = System.getProperty("environment")
        File folders = file("${project.buildDir}/allure-results")
        if (!folders.exists()) folders.mkdirs()

        File allurePropertiesFile = file("${project.buildDir}/allure-results/environment.properties")
        Properties environmentProperties = new Properties()
        if (environment) environmentProperties.setProperty("environment", environment)
        environmentProperties.store(allurePropertiesFile.newWriter(), 'Allure environment.properties file generated')
    }
}

tasks.withType(Test) {
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    useJUnitPlatform()
}


task runTests(type: Test) {
    useJUnitPlatform {
        includeTags 'quick-register', 'search-product'
    }
}

task runSearchTest(type: Test) {
    useJUnitPlatform {
        includeTags 'search-product'
    }
}

task runFailedTest(type: Test) {
    useJUnitPlatform {
        includeTags 'failed'
    }
}

task runRegressionTest(type: Test) {
    useJUnitPlatform {
        includeTags 'regression'
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


